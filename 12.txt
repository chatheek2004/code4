
package com.example.meetupp300


import android.Manifest
import android.content.pm.PackageManager
import android.location.Location
import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.*
import androidx.core.app.ActivityCompat
import androidx.fragment.app.Fragment
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.google.android.gms.location.FusedLocationProviderClient
import com.google.android.gms.location.LocationServices
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.database.DataSnapshot
import com.google.firebase.database.DatabaseError
import com.google.firebase.database.DatabaseReference
import com.google.firebase.database.FirebaseDatabase
import com.google.firebase.database.ValueEventListener
import java.text.SimpleDateFormat
import java.util.*

class HomeFragment : Fragment() {

    private lateinit var fusedLocationClient: FusedLocationProviderClient
    private lateinit var locateButton: Button
    private lateinit var refreshButton: Button
    private lateinit var userRecyclerView: RecyclerView
    private lateinit var userGridAdapter: UserGridAdapter
    private lateinit var database: DatabaseReference
    private lateinit var currentUserLocation: LocationForDistance
    private var currentUserUid: String? = null

    private lateinit var ageSpinner: Spinner
    private lateinit var genderSpinner: Spinner
    private lateinit var filterButton: Button
    private lateinit var noUsersTextView: TextView


    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        val view = inflater.inflate(R.layout.fragment_home, container, false)

        // Initialize UI elements
        ageSpinner = view.findViewById(R.id.ageSpinner)
        genderSpinner = view.findViewById(R.id.genderSpinner)
        filterButton = view.findViewById(R.id.filterButton)

        noUsersTextView = view.findViewById(R.id.noUsersTextView)


        locateButton = view.findViewById(R.id.locateButton)

        userRecyclerView = view.findViewById(R.id.recyclerView)

        fusedLocationClient = LocationServices.getFusedLocationProviderClient(requireActivity())
        database = FirebaseDatabase.getInstance().reference.child("users")
        currentUserUid = FirebaseAuth.getInstance().currentUser?.uid

        // Set up RecyclerView
        userRecyclerView.layoutManager = LinearLayoutManager(context)
        userGridAdapter = UserGridAdapter(emptyList())
        userRecyclerView.adapter = userGridAdapter

        // Fetch current user's location from Firebase
        fetchCurrentUserLocation()

        // Set click listener for the locate button
        locateButton.setOnClickListener {
            getLastLocation()
            resetFragmentState() // Reset the fragment state
        }

        // Set click listener for the filter button
        filterButton.setOnClickListener {
            fetchAllUsers()

        }

        // Populate age spinner from arrays.xml
        val ageRangeOptions = resources.getStringArray(R.array.age_range_options)
        val ageAdapter = ArrayAdapter(requireContext(), android.R.layout.simple_spinner_item, ageRangeOptions)
        ageAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
        ageSpinner.adapter = ageAdapter

        // Populate gender spinner from arrays.xml
        val genderOptions = resources.getStringArray(R.array.gender_options)
        val genderAdapter = ArrayAdapter(requireContext(), android.R.layout.simple_spinner_item, genderOptions)
        genderAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
        genderSpinner.adapter = genderAdapter

        return view
    }

    private fun resetFragmentState() {
        // Reset all variables to initial state
        currentUserLocation = LocationForDistance()
        currentUserUid = FirebaseAuth.getInstance().currentUser?.uid

        // Reset RecyclerView adapter
        userGridAdapter.setUserList(emptyList())

        // Reset spinners to default selection
        ageSpinner.setSelection(0)
        genderSpinner.setSelection(0)

        // Fetch current user's location from Firebase
        fetchCurrentUserLocation()
    }

    private fun fetchCurrentUserLocation() {
        currentUserUid?.let { uid ->
            val locationRef = database.child(uid).child("location")
            locationRef.addListenerForSingleValueEvent(object : ValueEventListener {
                override fun onDataChange(snapshot: DataSnapshot) {
                    val location = snapshot.getValue(LocationForDistance::class.java)
                    location?.let {
                        currentUserLocation = it
                        // Fetch users from Firebase after getting current user's location
                        fetchAllUsers()
                    }
                }

                override fun onCancelled(error: DatabaseError) {
                    Toast.makeText(
                        context,
                        "Failed to fetch current user location: ${error.message}",
                        Toast.LENGTH_SHORT
                    ).show()
                }
            })
        }
    }

    private fun getLastLocation() {
        // Check location permission
        if (ActivityCompat.checkSelfPermission(
                requireContext(),
                Manifest.permission.ACCESS_FINE_LOCATION
            ) != PackageManager.PERMISSION_GRANTED
        ) {
            ActivityCompat.requestPermissions(
                requireActivity(),
                arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),
                LOCATION_PERMISSION_REQUEST_CODE
            )
            return
        }

        // Get last known location from FusedLocationProviderClient
        fusedLocationClient.lastLocation
            .addOnSuccessListener { location: Location? ->
                location?.let {
                    // Update location in Firebase
                    updateLocationInFirebase(location.latitude, location.longitude)

                    // Reload all data and functions from scratch
                    fetchCurrentUserLocation()
                } ?: run {
                    Toast.makeText(
                        requireContext(),
                        "Location not available",
                        Toast.LENGTH_SHORT
                    ).show()
                }
            }
    }


    private fun updateLocationInFirebase(latitude: Double, longitude: Double) {
        currentUserUid?.let { uid ->
            val usersRef = database.child(uid)
            usersRef.child("location").setValue(LocationForDistance(latitude, longitude))
                .addOnSuccessListener {
                    Toast.makeText(
                        requireContext(),
                        "Location updated in Firebase",
                        Toast.LENGTH_SHORT
                    ).show()
                }
                .addOnFailureListener { e ->
                    Toast.makeText(
                        requireContext(),
                        "Failed to update location in Firebase: ${e.message}",
                        Toast.LENGTH_SHORT
                    ).show()
                }
        }
    }

    private fun fetchAllUsers() {
        currentUserUid?.let { uid ->
            database.addListenerForSingleValueEvent(object : ValueEventListener {
                override fun onDataChange(dataSnapshot: DataSnapshot) {
                    val userList = mutableListOf<UserGrid>()
                    var noUsersNearby = true // Flag to check if no users are nearby

                    dataSnapshot.children.filterNot { it.key == uid }.forEach { userSnapshot ->
                        val user = userSnapshot.getValue(UserGrid::class.java)
                        user?.let {
                            val locationSnapshot = userSnapshot.child("location")
                            val latitude = locationSnapshot.child("latitude").getValue(Double::class.java) ?: 0.0
                            val longitude = locationSnapshot.child("longitude").getValue(Double::class.java) ?: 0.0
                            val distance = calculateDistance(
                                currentUserLocation.latitude,
                                currentUserLocation.longitude,
                                latitude,
                                longitude
                            )
                            user.distance = distance // Assign the calculated distance to the user object

                            // Apply filters if set
                            val selectedAgeRange = ageSpinner.selectedItem.toString()
                            val selectedGender = genderSpinner.selectedItem.toString()
                            val age = calculateAge(user.birthdate).toInt()
                            val genderMatches = user.gender.equals(selectedGender, ignoreCase = true)
                            if ((selectedAgeRange == "All" || age in selectedAgeRange.split("-").map { it.toInt() }) &&
                                (selectedGender == "All" || genderMatches)
                            ) {
                                userList.add(user)
                                noUsersNearby = false // At least one user is nearby
                            }
                        }
                    }

                    // Sort the user list by distance (nearest to farthest)
                    userList.sortBy { it.distance.toDouble() } // Sort by distance in ascending order

                    // Display only the first 100 profiles if users are nearby, otherwise show "No users nearby" message
                    if (noUsersNearby) {
                        // Hide RecyclerView
                        userRecyclerView.visibility = View.GONE
                        // Show "No users nearby" message
                        noUsersTextView.visibility = View.VISIBLE
                    } else {
                        // Show RecyclerView
                        userRecyclerView.visibility = View.VISIBLE
                        // Hide "No users nearby" message
                        noUsersTextView.visibility = View.GONE

                        // Display only the first 100 profiles
                        val limitedList = userList.take(100)

                        // Update the RecyclerView with the limited and sorted user list
                        userGridAdapter.setUserList(limitedList)
                    }
                }

                override fun onCancelled(databaseError: DatabaseError) {
                    Toast.makeText(
                        context,
                        "Failed to fetch users: ${databaseError.message}",
                        Toast.LENGTH_SHORT
                    ).show()
                }
            })
        }
    }



    private fun calculateAge(birthdate: String): String {
        val dateFormat = SimpleDateFormat("dd-MM-yyyy", Locale.getDefault())
        val birthDate = dateFormat.parse(birthdate)
        val cal = Calendar.getInstance()
        val currentDate = cal.time
        val diff = currentDate.time - birthDate.time
        var age = diff / (1000L * 60 * 60 * 24 * 365)

        // Ensure age is at least 18 and at most 90
        age = maxOf(18, age.toInt()).toLong()
        age = minOf(90, age)

        return age.toString()
    }

    private fun calculateDistance(
        lat1: Double?,
        lon1: Double?,
        lat2: Double?,
        lon2: Double?
    ): String {
        // Check if any latitude or longitude is null or equal to 0
        if (lat1 == null || lon1 == null || lat2 == null || lon2 == null || lat1 == 0.0 || lon1 == 0.0 || lat2 == 0.0 || lon2 == 0.0) {
            return "N/A"
        }

        // Check if location data is not available in Firebase for either user
        if ((lat2 == -1.0 && lon2 == -1.0) || (lat1 == -1.0 && lon1 == -1.0)) {
            return "N/A"
        }

        val earthRadius = 6371.0 // Earth's radius in kilometers
        val dLat = Math.toRadians(lat2 - lat1)
        val dLon = Math.toRadians(lon2 - lon1)
        val a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2)) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2)
        val c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))
        val distance = earthRadius * c

        // Convert distance to nearest whole number in kilometers
        val roundedDistance = Math.round(distance).toInt()

        // Logging
        Log.d("DistanceCalculation", "Latitude 1: $lat1, Longitude 1: $lon1")
        Log.d("DistanceCalculation", "Latitude 2: $lat2, Longitude 2: $lon2")
        Log.d("DistanceCalculation", "Distance: $distance km")
        Log.d("DistanceCalculation", "Rounded Distance: $roundedDistance km")

        return "$roundedDistance"
    }

    companion object {
        private const val LOCATION_PERMISSION_REQUEST_CODE = 1001
    }
}
